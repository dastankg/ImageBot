from datetime import datetime

from asgiref.sync import sync_to_async

from shop.models import Telephone
import logging
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
import pytz
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

logger = logging.getLogger(__name__)


async def send_monthly_notification(bot):
    current_date = datetime.now().strftime("%d.%m.%Y")
    message = f"üîî –°–µ–≥–æ–¥–Ω—è –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞ ({current_date})\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ –æ–ø–ª–∞—Ç—É?"

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="payment_yes")],
            [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="payment_no")],
        ]
    )

    owner_telephones = await sync_to_async(
        lambda: list(Telephone.objects.filter(is_owner=True))
    )()

    for telephone in owner_telephones:
        try:
            if telephone.chat_id:
                await bot.send_message(
                    chat_id=telephone.chat_id, text=message, reply_markup=keyboard
                )
                logger.info(f"–û–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {telephone.number}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–ø—Ä–æ—Å–∞ {telephone.number}: {e}")


def setup_scheduler(bot):
    scheduler = AsyncIOScheduler(timezone=pytz.timezone("Asia/Bishkek"))

    scheduler.add_job(
        send_monthly_notification,
        CronTrigger(day="19", hour="23", minute="50"),
        kwargs={"bot": bot},
    )

    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    return scheduler
