import logging
import os
import uuid

from aiogram import Bot, F, Router
from aiogram.filters import Command, CommandStart
from aiogram.types import ContentType, Message

from tgbot.handlers.utils import (
    download_photo,
    get_shop_by_phone,
    get_user_profile,
    save_photo_to_post,
    save_user_profile,
)
from tgbot.keyboard.keyboards import (
    get_contact_keyboard,
    get_location_keyboard,
    get_main_keyboard,
    get_photo_keyboard,
)

router = Router()
logger = logging.getLogger(__name__)

user_states = {}


@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –º–∞–≥–∞–∑–∏–Ω–æ–≤.\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º, "
        "—á—Ç–æ–±—ã —è –º–æ–≥ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ.",
        reply_markup=get_contact_keyboard(),
    )


@router.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer(
        "üìã <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:</b>\n\n"
        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n"
        "2. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ¬ª\n"
        "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏\n"
        "4. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –º–∞–≥–∞–∑–∏–Ω–∞\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    )


@router.message(Command("profile"))
async def cmd_profile(message: Message):
    user = await get_user_profile(message.from_user.id)
    if not user:
        await message.answer(
            "–í—ã –µ—â–µ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.",
            reply_markup=get_contact_keyboard(),
        )
        return

    shop = await get_shop_by_phone(user["phone_number"])
    if shop:
        await message.answer(
            f"üìä <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n"
            f"üè™ –ú–∞–≥–∞–∑–∏–Ω: {shop.shop_name}\n"
            f"üë§ –í–ª–∞–¥–µ–ª–µ—Ü: {shop.owner_name}\n"
            f"üìç –ê–¥—Ä–µ—Å: {shop.address}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone_number}",
            reply_markup=get_main_keyboard(),
        )
    else:
        await message.answer(
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone_number}\n\n"
            f"‚ùó –≠—Ç–æ—Ç –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ –º–∞–≥–∞–∑–∏–Ω–æ–≤."
        )


@router.message(F.content_type == ContentType.CONTACT)
async def handle_contact(message: Message):
    contact = message.contact
    phone_number = contact.phone_number
    telegram_id = message.from_user.id

    if contact.user_id != telegram_id:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç.")
        return

    try:
        await save_user_profile(telegram_id, phone_number)

        user_states[telegram_id] = {"phone": phone_number}

        shop = await get_shop_by_phone(phone_number)

        if shop:
            await message.answer(
                f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!\n\n"
                f"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–∞–≥–∞–∑–∏–Ω '{shop.shop_name}'.\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π.",
                reply_markup=get_main_keyboard(),
            )
        else:
            await message.answer(
                "‚ùå –í–∞—à –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ.\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞."
            )
    except Exception as e:
        logger.error(f"Error in handle_contact: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∞—à–µ–≥–æ –Ω–æ–º–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


@router.message(F.content_type == ContentType.LOCATION)
async def handle_location(message: Message):
    telegram_id = message.from_user.id

    if telegram_id not in user_states:
        await message.answer(
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.",
            reply_markup=get_contact_keyboard(),
        )
        return

    user_states[telegram_id]["location"] = {
        "latitude": message.location.latitude,
        "longitude": message.location.longitude,
    }

    await message.answer(
        "üìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞!\n\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –º–∞–≥–∞–∑–∏–Ω–∞.",
        reply_markup=get_photo_keyboard(),
    )


@router.message(F.content_type == ContentType.PHOTO)
async def handle_photo(message: Message, bot: Bot):
    telegram_id = message.from_user.id

    try:
        user_profile = await get_user_profile(telegram_id)
        if not user_profile:
            await message.answer(
                "–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.",
                reply_markup=get_contact_keyboard(),
            )
            return

        user_state = user_states.get(telegram_id, {})
        location = user_state.get("location")

        if not location:
            await message.answer(
                "–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.",
                reply_markup=get_location_keyboard(),
            )
            return

        shop = await get_shop_by_phone(user_profile["phone_number"])
        if not shop:
            await message.answer(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ –º–∞–≥–∞–∑–∏–Ω–æ–≤. "
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            return

        photo = message.photo[-1]
        file_id = photo.file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path

        bot_token = os.getenv("TG_TOKEN")
        if not bot_token:
            await message.answer(
                "–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            logger.error("TG_TOKEN not found in environment variables!")
            return

        file_url = f"https://api.telegram.org/file/bot{bot_token}/{file_path}"
        filename = f"{uuid.uuid4().hex}.jpg"

        status_message = await message.answer("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏...")

        try:
            relative_path = await download_photo(file_url, filename)
            await save_photo_to_post(
                shop.id,
                relative_path,
                latitude=location["latitude"],
                longitude=location["longitude"],
            )

            if "location" in user_states[telegram_id]:
                del user_states[telegram_id]["location"]

            await bot.edit_message_text(
                f"‚úÖ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ —Å–≤—è–∑–∞–Ω–æ —Å –º–∞–≥–∞–∑–∏–Ω–æ–º '{shop.shop_name}'.",
                chat_id=status_message.chat.id,
                message_id=status_message.message_id,
            )

            await message.answer(
                "–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?", reply_markup=get_main_keyboard()
            )

        except Exception as e:
            logger.error(f"Error saving photo: {e}")
            await bot.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                chat_id=status_message.chat.id,
                message_id=status_message.message_id,
            )

    except Exception as e:
        logger.error(f"Uncaught error in handle_photo: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


@router.message(F.text == "üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ")
async def upload_photo_command(message: Message):
    telegram_id = message.from_user.id

    user_profile = await get_user_profile(telegram_id)
    if not user_profile:
        await message.answer(
            "–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.",
            reply_markup=get_contact_keyboard(),
        )
        return

    await message.answer(
        "–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –º–∞–≥–∞–∑–∏–Ω–∞.",
        reply_markup=get_location_keyboard(),
    )


@router.message(F.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def profile_command(message: Message):
    await cmd_profile(message)


@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def help_command(message: Message):
    await cmd_help(message)


@router.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back_command(message: Message):
    await message.answer(
        "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=get_main_keyboard(),
    )


@router.message()
async def unknown_message(message: Message):
    user = await get_user_profile(message.from_user.id)
    if not user:
        await message.answer(
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.",
            reply_markup=get_contact_keyboard(),
        )
    else:
        await message.answer(
            "–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã. "
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é.",
            reply_markup=get_main_keyboard(),
        )
